Traducción y adaptación: Luis Gonzalez <hadesbox@gmail.com>
basado en http://rypress.com/
 
 ----------------------------------------------------------------------

 EJERCICIOS CON RAMAS (BRANCHES).


1. ahora trabajaremos con ramas... normalmente cuando vayas a hacer un experimento loco (por ejemplo un feature nuevo de tu aplicación), no querras tocar tu master (tu rama estable, el equivalente al TRUNK en SVN)... lo mejor para hacer cualquier cambio siempre, es HACER UNA RAMA nueva y trabajar en esa rama. Para listar las ramas actuales 

$ git branch

la rama con un *, es la rama en la que te encuentras actualmente.

2. para crear una rama llamada "experimento" solo tienes que 
$ git branch experimento
$ git branch

3. para cambiarnos a la nueva rama
$ git checkout experimento
$ git status

Algo importante que debes recordar, es que la rama actual "experimento" es una copia idéntica de la rama "master", esto es pues cuando creas una rama nueva (como en el paso 2), la nueva rama (experimento) es una copia de la rama actual (que es en la que te encuentras al momento de crearla) en nuestro caso master.

4. en esta nueva rama podemos hacer todos los experimentos que querramos, y todos y cada uno de los commits que se realicen estaran unicamente dentro de ESTA rama, evitando problemas y conflictos. Para continuar crearemos un nuevo archivo arcoiris.html


<!DOCTYPE html>
<html lang="es">
<head>
  <title>Experimento loco 2.0</title>
  <meta charset="utf-8" />
</head>
<body>
  <h1>Experimento loco 2.0</h1>
  <p>Mira! Es un arcoiris!</p>

  <ul>
    <li style="color: red">Rojo</li>
    <li style="color: orange">Naranja</li>
    <li style="color: yellow">Amarillo</li>
    <li style="color: green">Verde</li>
    <li style="color: blue">Azul</li>
    <li style="color: indigo">Otro azul</li>
    <li style="color: violet">Violeta</li>
  </ul>
    
  <p><a href="index.html">Regresar al index</a></p>
</body>
</html>


5. agrega el archivo nuevo y hazle commit
$ git add arcoiris.html
$ git status
$ git commit -m "Agregando un arcoiris"

6. revisa el historial de commits...
$ git log

7. si ahora mismo cambias a la rama master, veras como el archivo arcoiris no estará ahí, tampoco aparece en el historial... esto es por que cada rama guarda su historial por separado (hasta que se le hace merge)

$ git branch 

$ git checkout master
$ git log

8. ahora regresemos a la rama experimento

$ git checkout experimento
$ git branch
$ git status


9. supongamos que queremos renombrar el archivo arcoiris.html, para hacerlo de forma ordenada y que GIT relacione el nombre del archivo antiguo con el nuevo debemos 

$ mv arcoiris.html arco.html
$ git status
$ git rm arcoiris.html
$ git status
$ git add arco.html
$ git status

esto se hace, para que el historial de commits del archivo aparezcan todos los commits, tanto los del archivo con su nombre antiguo como el nuevo.

10. y hacemos commit del cambio...

$ git commit -m "Renombrando arcoiris.html a arco.html"
$ git log --oneline


11. despues de hacer todo esto... supongamos que quieres regresar a tu rama principal para esto puedes hacer los siquiente comandos (que ya deberías recordar!!!)

$ git checkout master
$ git branch
$ git log --oneline

12. ahora crearemos una RAMA nueva a partir de master, con una nueva funcionalidad... hojas de estilo en cascada...

$ git branch css
$ git checkout css

13. crea tu nueva style.css en la raiz del repo

body {
  padding: 20px;
  font-family: Verdana, Arial, Helvetica, sans-serif;
  font-size: 14px;
  color: #111;
}

p, ul {
  margin-bottom: 10px;
}

ul {
  margin-left: 20px;
}



14. añadela y hazle commit

$ git add style.css
$ git status
$ git commit -m "Añadiendo CSS stylesheet"

15. enlazala en los tres archivos index.html azul.html y naranja.html, agregando detro del <head></head>

<link rel="stylesheet" href="style.css" />


16. Y por último haz commits de estos cambios, cuando quieres hacer commit de TODOS los archivos que tienen cambios, en lugar de hacerles ADD y luego COMMIT, puedes utilizar la opción -a, esto agrega y commitea todos los archivos que tienen cambios (en lugar de indicarlos tu individualmente con el ADD)
$ git status
$ git commit -a -m "Enlazando las hojas en cascada"
$ git log --oneline


17. regresa a master (DE NUEVO... si)
$ git checkout master

18. y analiza el estado actual de master (que seguramente ya lo haz olvidado...)
$ git log --oneline


19. ahora haremos un MERGE entre la rama css y master...

$ git merge css

lo que le estamos pidiendo a GIT que haga es "trae a la rama actual (master) todo el contenido de la rama css".


20. si analizas el log, verás como mágicamente aparecen los commits en el historial de la rama CSS (que ahora estan en master.)
$ git log --oneline


21. por último.. la rama CSS ya no sirve para nada, con lo que deberíamos borrarla

$ git branch -d css
$ git branch


En git es muy frecuente que crees y destruyas RAMAS, inclusive varias veces al día dependiendo si por ejemplo te piden hacer 2 funcionalidades, pues creas 2 ramas distintas, donde desarrollas la funcionalidad dentro de cada una, y luego si te piden un hot-fix, creas otra rama con ese nombre, y cuando terminas el hot-fix lo integras en master (el trunk), y luego regresas a tus ramas de features.



22. ahora tienes que cambiarte a la rama experimento
$ git branch
$ git checkout experimento
$ git log --oneline


23. por que vamos a hacer un MERGE del contenido de la rama MASTER (que ya tiene tambien el contenido de rama CSS) con la rama experimento
$ git merge master
$ git log --oneline


de esta forma, tienes actualizada tu rama experimento con los últimos cambios mas ESTABLES de tu rama master (TRUNK), y asi es mucho menos probable que se generen algún tipo de conflictos.

24. enlaza el css al arco.html agregando...

<link rel="stylesheet" href="style.css" />

y no te olvides de agregar el enlace en index.html hacia arco.html, para esto agrega al <ul>


  <li>
    <a href="arco.html">La pagina de multicolor</a>
  </li>


25. por ultimo haz commit de los cambios
$ git status
$ git commit -a -m "Añadiendo la hoja de estilos al arco.html"
$ git log --oneline


26. ahora forzaremos un CONFLICTO... para esto mientras estas en EXPERIMENTO, edita index.html y cambia

<p>Hola soy MANOLO EL DEL BOMBO!</p>

poniendo tu nombre.


27. haz commit de todo ello
$ git commit -m "Mi nombre"


28. ahora nos cambiaremos a master, 
$ git checkout master

y editaremos de nuevo index.html cambiando

<p>Hola soy MANOLO EL DEL BOMBO!</p>

por

<p>Toma Jeroma, Pastillas de Goma!</p>

29. hacemos commit de ello..

$ git status
$ git commit -a -m "Añadiendo a jeroma"
$ git log --oneline


30. En este punto, "tu nombre" esta en la rama experimento, y "jeroma" en la actual, el cambio es sobre la misma línea de código esto causará un conflicto cuando hagas el merge, esto sucede al traer todos los cambios de la rama EXPERIMENTO a master
$ git merge experimento
$ git status

31. en este punto observamos como el merge no se ha realizado automaticamente, cuando hay conflictos TÚ tienes que resolverlos para esto solo hace falta editar el archivo con el conflicto index.html donde encontraras algo como esto


<<<<<<< HEAD
	<p>Toma Jeroma, Pastillas de Goma!</p>
=======
	<p>Mi nombre....!</p>
>>>>>>> crazy

Si no hubiese pasado ningún conflicto (como cuando hicimos merge entre css y master) se realiza el commit del merge de manera automática... cada merge GENERA un nuevo commit donde se indica en un comentario autogenerado, que ramas estuvieron involucradas en la operación...


32.debes de borrar todo lo que NO quieres que se haga commit, con lo cual solo dejamos

	<p>Mi nombre....!</p>


33. por ultimo agregamos el archivo y hacemos el "commit del merge" (que normalmente es automatico, pero esta vez no se ejecuto por el fallo causado por el conflicto)

$ git add index.html
$ git commit index.html
$ git status






